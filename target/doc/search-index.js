var searchIndex = {};
searchIndex['sliding_windows'] = {"items":[[3,"Storage","sliding_windows","This holds the backing allocation for the `Window` of a `Adaptor`.",null,null],[3,"Adaptor","","See [sliding_windows](index.html) for more information.",null,null],[11,"optimized","","Create a new `Storage` with a given window size optimized for a given Iterator.\nThis will allocate an amount of memory big enough to avoid shifting elements during iteration.",0,{"inputs":[{"name":"storage"},{"name":"i"},{"name":"usize"}],"output":{"name":"storage"}}],[11,"new","","Create a new `Storage` with a given window size.\nThis will allocate twice as much memory as is needed to store the Window for performance reasons.",0,{"inputs":[{"name":"storage"},{"name":"usize"}],"output":{"name":"storage"}}],[11,"new_exact","","Create a new `Storage` with a given window size.\nThis will allocate exactly as much memory as is needed to store the Window.",0,{"inputs":[{"name":"storage"},{"name":"usize"}],"output":{"name":"storage"}}],[11,"from_vec","","Create a new `Storage` with a given window size from a given struct implementing `Into&lt;Vec&gt;`.\nThe contents of the Vec will be removed.\nThis will reuse the allocation of the Vec instead of allocating new memory.",0,{"inputs":[{"name":"storage"},{"name":"s"},{"name":"usize"}],"output":{"name":"storage"}}],[11,"into","","",0,{"inputs":[{"name":"storage"}],"output":{"name":"vec"}}],[11,"new","","This creates a new Adaptor. Usually you should be using",1,{"inputs":[{"name":"adaptor"},{"name":"i"},{"name":"storage"}],"output":{"name":"adaptor"}}],[11,"next","","",1,{"inputs":[{"name":"adaptor"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[8,"IterExt","","",null,null],[11,"sliding_windows","","",2,{"inputs":[{"name":"iterext"},{"name":"storage"}],"output":{"name":"adaptor"}}]],"paths":[[3,"Storage"],[3,"Adaptor"],[8,"IterExt"]]};
initSearch(searchIndex);
